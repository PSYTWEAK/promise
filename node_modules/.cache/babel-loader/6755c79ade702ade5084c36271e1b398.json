{"ast":null,"code":"import _slicedToArray from \"/Users/nanoissuperior/prom/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nanoissuperior/prom/client/src/App.js\";\nimport React, { Component, useState } from \"react\";\nimport PromController from \"./contracts/PromController.json\";\nimport token from \"./contracts/Token1.json\";\nimport getWeb3 from \"./getWeb3\";\nimport ConnectWallet from \"./components/ConnectWallet.js\";\nimport CreatePromise from \"./pages/createPromise.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        web3 = _useState2[0],\n        setWeb3 = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        account = _useState4[0],\n        setAccount = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        prom = _useState6[0],\n        setProm = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        ERC20 = _useState8[0],\n        setERC20 = _useState8[1];\n\n  const componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = PromController.networks[networkId];\n      setProm(new web3.eth.Contract(PromController.abi, deployedNetwork && deployedNetwork.address));\n      setERC20(new web3.eth.Contract(token.abi, deployedNetwork && deployedNetwork.address));\n      setAccount(accounts[0]);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n  /* Approves maximum int to improve UX */\n\n\n  async function approve(input) {\n    await ERC20.methods.approve(prom.address, (2 ** 256).toLocaleString(\"fullwide\", {\n      useGrouping: false\n    })).send({\n      from: account\n    }).then(result => {\n      console.log(\"approved\");\n    });\n  }\n\n  async function getAccount() {\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    class: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Promise \\uD83E\\uDD1D\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"connet\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"lol \")), React.createElement(ConnectWallet, {\n    getAccount: () => getAccount(),\n    account: account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(CreatePromise, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nanoissuperior/prom/client/src/App.js"],"names":["React","Component","useState","PromController","token","getWeb3","ConnectWallet","CreatePromise","App","web3","setWeb3","account","setAccount","prom","setProm","ERC20","setERC20","componentDidMount","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","Contract","abi","address","error","alert","console","approve","input","methods","toLocaleString","useGrouping","send","from","then","result","log","getAccount","window","ethereum","request","method"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport PromController from \"./contracts/PromController.json\";\nimport token from \"./contracts/Token1.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport ConnectWallet from \"./components/ConnectWallet.js\";\nimport CreatePromise from \"./pages/createPromise.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [prom, setProm] = useState(null);\n  const [ERC20, setERC20] = useState(null);\n\n  const componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n\n      const accounts = await web3.eth.getAccounts();\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = PromController.networks[networkId];\n\n      setProm(new web3.eth.Contract(PromController.abi, deployedNetwork && deployedNetwork.address));\n      setERC20(new web3.eth.Contract(token.abi, deployedNetwork && deployedNetwork.address));\n      setAccount(accounts[0]);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  /* Approves maximum int to improve UX */\n  async function approve(input) {\n    await ERC20.methods\n      .approve(prom.address, (2 ** 256).toLocaleString(\"fullwide\", { useGrouping: false }))\n      .send({ from: account })\n      .then((result) => {\n        console.log(\"approved\");\n      });\n  }\n  async function getAccount() {\n    await window.ethereum\n      .request({\n        method: \"eth_requestAccounts\",\n      })\n      .then((result) => {\n        setAccount(result[0]);\n      });\n  }\n\n  return (\n    <div class=\"App\">\n      <h1>Promise 🤝</h1>\n      <div>\n        <p>connet</p>\n        <p>lol </p>\n      </div>\n      <ConnectWallet getAccount={() => getAccount()} account={account} />\n      <CreatePromise></CreatePromise>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}